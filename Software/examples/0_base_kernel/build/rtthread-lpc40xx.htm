<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\rtthread-lpc40xx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\rtthread-lpc40xx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Sat Dec 21 01:03:19 2013
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[15b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[22]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC_IRQHandler</a><BR>
 <LI><a href="#[e0]">rt_device_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">rt_kprintf</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[23]">BOD_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2e]">CANActivity_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[25]">CAN_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[26]">DMA_IRQHandler</a> from drv_sd.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[34]">EEPROM_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1e]">EINT0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1f]">EINT1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[20]">EINT2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[21]">EINT3_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[28]">ENET_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[32]">GPIO_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[27]">I2S_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[31]">LCD_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[29]">MCI_IRQHandler</a> from drv_sd.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2a]">MCPWM_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1c]">PLL0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2c]">PLL1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[33]">PWM0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[16]">PWM1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2b]">QEI_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1d]">RTC_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1a]">SSP0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1b]">SSP1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[30]">SSP2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from board.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(.text)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[f]">TIMER1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[10]">TIMER2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[11]">TIMER3_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from drv_uart.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[14]">UART2_IRQHandler</a> from drv_uart.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[15]">UART3_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2f]">UART4_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2d]">USBActivity_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[24]">USB_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[d]">WDT_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[49]">__main</a> from __main.o(!!!main) referenced from startup_lpc407x_8x_177x_8x.o(.text)
 <LI><a href="#[45]">lpc_configure</a> from drv_uart.o(.text) referenced from drv_uart.o(.constdata)
 <LI><a href="#[46]">lpc_control</a> from drv_uart.o(.text) referenced from drv_uart.o(.constdata)
 <LI><a href="#[48]">lpc_getc</a> from drv_uart.o(.text) referenced from drv_uart.o(.constdata)
 <LI><a href="#[47]">lpc_putc</a> from drv_uart.o(.text) referenced from drv_uart.o(.constdata)
 <LI><a href="#[60]">rt_init_thread_entry</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[39]">rt_mci_close</a> from drv_sd.o(.text) referenced from drv_sd.o(.text)
 <LI><a href="#[3c]">rt_mci_control</a> from drv_sd.o(.text) referenced from drv_sd.o(.text)
 <LI><a href="#[37]">rt_mci_init</a> from drv_sd.o(.text) referenced from drv_sd.o(.text)
 <LI><a href="#[38]">rt_mci_open</a> from drv_sd.o(.text) referenced from drv_sd.o(.text)
 <LI><a href="#[3a]">rt_mci_read</a> from drv_sd.o(.text) referenced from drv_sd.o(.text)
 <LI><a href="#[3b]">rt_mci_write</a> from drv_sd.o(.text) referenced from drv_sd.o(.text)
 <LI><a href="#[41]">rt_serial_close</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[44]">rt_serial_control</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[3f]">rt_serial_init</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[40]">rt_serial_open</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[42]">rt_serial_read</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[43]">rt_serial_write</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[3e]">rt_thread_exit</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[3d]">rt_thread_idle_entry</a> from idle.o(.text) referenced from idle.o(.text)
 <LI><a href="#[13a]">rt_thread_timeout</a> from thread.o(.text) referenced from thread.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[15d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[15e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[15f]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[160]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[161]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[162]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[163]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[164]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[165]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[166]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[167]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[168]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[169]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[170]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[171]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[172]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[173]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[174]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[56]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[175]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[176]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[177]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[178]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[179]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[17a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[4b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[17b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[51]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[17c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[52]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[17d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[15c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[55]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[17e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[57]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>rt_hw_board_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_hw_board_init &rArr; rt_hw_uart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[60]"></a>rt_init_thread_entry</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_init_thread_entry &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>rt_application_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[17f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[183]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 664 bytes, Stack size 12 bytes, system_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetCLKDiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[65]"></a>fpu_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, system_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fpu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 210 bytes, Stack size 4 bytes, system_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; fpu_init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpu_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>CLKPWR_SetCLKDiv</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lpc_clkpwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[78]"></a>CLKPWR_GetCLK</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[69]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc_clkpwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[184]"></a>CLKPWR_Sleep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>CLKPWR_DeepSleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>CLKPWR_PowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>CLKPWR_DeepPowerDown</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc_clkpwr.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>GPDMA_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lpc_gpdma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_hw_init
</UL>

<P><STRONG><a name="[91]"></a>GPDMA_Setup</STRONG> (Thumb, 592 bytes, Stack size 16 bytes, lpc_gpdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPDMA_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SettingDma
</UL>

<P><STRONG><a name="[92]"></a>GPDMA_ChannelCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc_gpdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SettingDma
</UL>

<P><STRONG><a name="[95]"></a>GPDMA_IntGetStatus</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, lpc_gpdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DMA_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>GPDMA_ClearIntPending</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc_gpdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DMA_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>PINSEL_GetPinType</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, lpc_pinsel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetFilter
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetOpenDrainMode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetI2CMode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetI2CFilter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetSlewMode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetInvertInput
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetHysMode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetPinMode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetAnalogPinMode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_DacEnable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[6a]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lpc_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
</UL>

<P><STRONG><a name="[6d]"></a>PINSEL_SetPinMode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lpc_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[6e]"></a>PINSEL_SetHysMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lpc_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[6f]"></a>PINSEL_SetInvertInput</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lpc_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[70]"></a>PINSEL_SetSlewMode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lpc_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[71]"></a>PINSEL_SetI2CFilter</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lpc_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetI2CMode
</UL>

<P><STRONG><a name="[72]"></a>PINSEL_SetI2CMode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lpc_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetI2CFilter
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[73]"></a>PINSEL_SetOpenDrainMode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lpc_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[74]"></a>PINSEL_SetAnalogPinMode</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lpc_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[75]"></a>PINSEL_DacEnable</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lpc_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[76]"></a>PINSEL_SetFilter</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lpc_pinsel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>

<P><STRONG><a name="[7d]"></a>UART_Init</STRONG> (Thumb, 550 bytes, Stack size 24 bytes, lpc_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_configure
</UL>

<P><STRONG><a name="[7e]"></a>UART_TxCmd</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lpc_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_configure
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[7f]"></a>UART_DeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lpc_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
</UL>

<P><STRONG><a name="[b9]"></a>UART_ConfigStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_configure
</UL>

<P><STRONG><a name="[81]"></a>UART_SendByte</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lpc_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[83]"></a>UART_ReceiveByte</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>

<P><STRONG><a name="[80]"></a>UART_Send</STRONG> (Thumb, 224 bytes, Stack size 52 bytes, lpc_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_putc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[82]"></a>UART_Receive</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, lpc_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_getc
</UL>

<P><STRONG><a name="[188]"></a>UART_ForceBreak</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lpc_uart.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>UART_IntConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lpc_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_control
</UL>

<P><STRONG><a name="[be]"></a>UART_GetLineStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>UART_GetIntId</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lpc_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[189]"></a>UART_CheckBusy</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lpc_uart.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>UART_FIFOConfig</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, lpc_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_FIFOConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_configure
</UL>

<P><STRONG><a name="[ba]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_configure
</UL>

<P><STRONG><a name="[84]"></a>UART_ABCmd</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, lpc_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>

<P><STRONG><a name="[85]"></a>UART_ABClearIntPending</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lpc_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>

<P><STRONG><a name="[18a]"></a>UART_IrDAInvtInputCmd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc_uart.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>UART_IrDACmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lpc_uart.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>UART_IrDAPulseDivConfig</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, lpc_uart.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>UART_FullModemForcePinState</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, lpc_uart.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>UART_FullModemConfigMode</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lpc_uart.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>UART_FullModemGetStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc_uart.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>UART_RS485Config</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lpc_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>

<P><STRONG><a name="[87]"></a>UART_RS485ReceiverCmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lpc_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>

<P><STRONG><a name="[88]"></a>UART_RS485Send</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, lpc_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485SendSlvAddr
</UL>

<P><STRONG><a name="[89]"></a>UART_RS485SendSlvAddr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lpc_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[8a]"></a>UART_RS485SendData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lpc_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
</UL>

<P><STRONG><a name="[8d]"></a>mci_get_cmdresp</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mci_get_cmdresp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
</UL>

<P><STRONG><a name="[8c]"></a>mci_send_cmd</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mci_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_card_reset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
</UL>

<P><STRONG><a name="[8b]"></a>mci_cmd_resp</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mci_cmd_resp &rArr; mci_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_get_cmdresp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_stopTransmission
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_blockLen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_selectCard
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_get_CSD
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_cardAddress
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_get_CID
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_acmd_sendOpCond
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_sendIfCond
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_sendOpCond
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_sendACMD
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_buswidth
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_get_cardStatus
</UL>

<P><STRONG><a name="[90]"></a>MCI_SettingDma</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MCI_SettingDma &rArr; GPDMA_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ChannelCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Setup
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_read
</UL>

<P><STRONG><a name="[94]"></a>MCI_DMA_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_ClearIntPending
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_IntGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[26]"></a>DMA_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_IRQHandler &rArr; MCI_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DMA_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>mci_cmd_sendACMD</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mci_cmd_sendACMD &rArr; mci_cmd_resp &rArr; mci_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_acmd_sendOpCond
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_buswidth
</UL>

<P><STRONG><a name="[9a]"></a>mci_set_buswidth</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mci_set_buswidth &rArr; mci_send_buswidth &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_buswidth
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_config
</UL>

<P><STRONG><a name="[9b]"></a>mci_process_ISR</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mci_process_ISR &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_rx_enable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_tx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[29]"></a>MCI_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MCI_IRQHandler &rArr; mci_process_ISR &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_process_ISR
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>mci_card_reset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mci_card_reset &rArr; mci_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_init
</UL>

<P><STRONG><a name="[a0]"></a>mci_cmd_sendOpCond</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mci_cmd_sendOpCond &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_init
</UL>

<P><STRONG><a name="[a1]"></a>mci_cmd_sendIfCond</STRONG> (Thumb, 108 bytes, Stack size 60 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mci_cmd_sendIfCond &rArr; mci_cmd_resp &rArr; mci_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_init
</UL>

<P><STRONG><a name="[a2]"></a>mci_acmd_sendOpCond</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mci_acmd_sendOpCond &rArr; mci_cmd_sendACMD &rArr; mci_cmd_resp &rArr; mci_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_sendACMD
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_outputMode
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_init
</UL>

<P><STRONG><a name="[a4]"></a>mci_get_CID</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mci_get_CID &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_config
</UL>

<P><STRONG><a name="[a5]"></a>mci_set_cardAddress</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mci_set_cardAddress &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_outputMode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_config
</UL>

<P><STRONG><a name="[190]"></a>mci_get_cardAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_sd.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>mci_get_CSD</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mci_get_CSD &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_check_status
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_config
</UL>

<P><STRONG><a name="[a7]"></a>mci_cmd_selectCard</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mci_cmd_selectCard &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_check_status
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_config
</UL>

<P><STRONG><a name="[a8]"></a>mci_set_blockLen</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mci_set_blockLen &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_check_status
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_config
</UL>

<P><STRONG><a name="[a9]"></a>mci_cmd_stopTransmission</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mci_cmd_stopTransmission &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_check_status
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_read
</UL>

<P><STRONG><a name="[aa]"></a>mci_cmd_write</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mci_cmd_write &rArr; mci_check_status &rArr; mci_get_cardStatus &rArr; mci_cmd_resp &rArr; mci_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_check_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_write
</UL>

<P><STRONG><a name="[ab]"></a>mci_cmd_read</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mci_cmd_read &rArr; mci_check_status &rArr; mci_get_cardStatus &rArr; mci_cmd_resp &rArr; mci_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_check_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_read
</UL>

<P><STRONG><a name="[b3]"></a>mci_hw_init</STRONG> (Thumb, 596 bytes, Stack size 16 bytes, drv_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_clock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>

<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UART0_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART2_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UART2_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>rt_hw_uart_init</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_hw_uart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[c3]"></a>rtthread_startup</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_tick_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_object_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c5]"></a>rt_system_tick_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[10d]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[ce]"></a>rt_tick_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[5a]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[191]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>rt_device_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[b8]"></a>rt_device_register</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_hw_init
</UL>

<P><STRONG><a name="[d8]"></a>rt_device_unregister</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[da]"></a>rt_device_init_all</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[db]"></a>rt_device_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[dc]"></a>rt_device_open</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[dd]"></a>rt_device_close</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_device_close &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[de]"></a>rt_device_read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[e0]"></a>rt_device_write</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = rt_device_write &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[e1]"></a>rt_device_control</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[e2]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[e3]"></a>rt_device_set_tx_complete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[192]"></a>rt_thread_idle_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, idle.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>rt_thread_idle_excute</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[cb]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[f1]"></a>rt_sem_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_sem_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[f3]"></a>rt_sem_detach</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[f4]"></a>rt_sem_create</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[f6]"></a>rt_sem_delete</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[f7]"></a>rt_sem_take</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[fb]"></a>rt_sem_trytake</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[fc]"></a>rt_sem_release</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[fe]"></a>rt_sem_control</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[b6]"></a>rt_mutex_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_hw_init
</UL>

<P><STRONG><a name="[ff]"></a>rt_mutex_detach</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[100]"></a>rt_mutex_create</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[101]"></a>rt_mutex_delete</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[b0]"></a>rt_mutex_take</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_read
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_init
</UL>

<P><STRONG><a name="[b1]"></a>rt_mutex_release</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_read
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_init
</UL>

<P><STRONG><a name="[193]"></a>rt_mutex_control</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ipc.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>rt_event_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[104]"></a>rt_event_detach</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[b7]"></a>rt_event_create</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_hw_init
</UL>

<P><STRONG><a name="[105]"></a>rt_event_delete</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[9c]"></a>rt_event_send</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_process_ISR
</UL>

<P><STRONG><a name="[b2]"></a>rt_event_recv</STRONG> (Thumb, 442 bytes, Stack size 64 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_event_recv &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_read
</UL>

<P><STRONG><a name="[106]"></a>rt_event_control</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[107]"></a>rt_mb_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[109]"></a>rt_mb_detach</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[10a]"></a>rt_mb_create</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[10b]"></a>rt_mb_delete</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[10c]"></a>rt_mb_send_wait</STRONG> (Thumb, 434 bytes, Stack size 48 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[10e]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[10f]"></a>rt_mb_recv</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[110]"></a>rt_mb_control</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[111]"></a>rt_mq_init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[112]"></a>rt_mq_detach</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[113]"></a>rt_mq_delete</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[114]"></a>rt_mq_create</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[115]"></a>rt_mq_send</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[117]"></a>rt_mq_urgent</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[118]"></a>rt_mq_recv</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[119]"></a>rt_mq_control</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[59]"></a>rt_interrupt_enter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5b]"></a>rt_interrupt_leave</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e6]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
</UL>

<P><STRONG><a name="[11a]"></a>rt_get_errno</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>

<P><STRONG><a name="[df]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[11b]"></a>_rt_errno</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>

<P><STRONG><a name="[b5]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_hw_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>

<P><STRONG><a name="[116]"></a>rt_memcpy</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>

<P><STRONG><a name="[194]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>rt_memcmp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>

<P><STRONG><a name="[11d]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>

<P><STRONG><a name="[11c]"></a>rt_strstr</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</UL>

<P><STRONG><a name="[195]"></a>rt_strcasecmp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[d5]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[196]"></a>rt_strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>

<P><STRONG><a name="[123]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[120]"></a>rt_vsnprintf</STRONG> (Thumb, 796 bytes, Stack size 88 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>

<P><STRONG><a name="[61]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init_all
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_control
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc_configure
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_control
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_dump
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[c4]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[124]"></a>rt_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[125]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[126]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>

<P><STRONG><a name="[197]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>rt_console_set_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[127]"></a>rt_malloc_align</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[128]"></a>rt_free_align</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[132]"></a>__rt_ffs</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[198]"></a>rt_malloc_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>rt_free_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>rt_system_heap_init</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[b4]"></a>rt_malloc</STRONG> (Thumb, 974 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_hw_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>

<P><STRONG><a name="[e8]"></a>rt_free</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
</UL>

<P><STRONG><a name="[12a]"></a>rt_realloc</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>

<P><STRONG><a name="[12b]"></a>rt_calloc</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[19a]"></a>rt_memory_info</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>rt_object_attach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>rt_object_detach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>rt_object_trytake_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>rt_object_take_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>rt_object_put_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>rt_system_object_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1a0]"></a>rt_object_get_information</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>rt_object_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[d9]"></a>rt_object_detach</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_object_detach &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[f5]"></a>rt_object_allocate</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[e9]"></a>rt_object_delete</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
</UL>

<P><STRONG><a name="[e7]"></a>rt_object_is_systemobject</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_object_is_systemobject &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[12f]"></a>rt_object_find</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[1a1]"></a>rt_scheduler_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>rt_system_scheduler_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[cc]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[fa]"></a>rt_schedule</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[136]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[137]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[d4]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[d6]"></a>rt_exit_critical</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[13a]"></a>rt_thread_timeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>rt_thread_init</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[d0]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
</UL>

<P><STRONG><a name="[ef]"></a>rt_thread_resume</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[64]"></a>rt_thread_startup</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[140]"></a>rt_thread_detach</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[63]"></a>rt_thread_create</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[141]"></a>rt_thread_delete</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[d1]"></a>rt_thread_yield</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[ec]"></a>rt_thread_suspend</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[142]"></a>rt_thread_sleep</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[99]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_hw_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_stopTransmission
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_blockLen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_selectCard
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_get_CSD
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_cardAddress
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_get_CID
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_sendOpCond
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_buswidth
</UL>

<P><STRONG><a name="[102]"></a>rt_thread_control</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[143]"></a>rt_thread_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>

<P><STRONG><a name="[1a2]"></a>rt_timer_timeout_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>rt_timer_dump</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_count_height
</UL>

<P><STRONG><a name="[13e]"></a>rt_timer_init</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_timer_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[138]"></a>rt_timer_detach</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[14b]"></a>rt_timer_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[14c]"></a>rt_timer_delete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[f9]"></a>rt_timer_start</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_timer_start &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[13f]"></a>rt_timer_stop</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_timer_stop &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[f8]"></a>rt_timer_control</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_timer_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[d2]"></a>rt_timer_check</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[14e]"></a>rt_timer_next_timeout_tick</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[c7]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[ca]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[13d]"></a>rt_hw_stack_init</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[1a3]"></a>rt_hw_exception_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpuport.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[150]"></a>rt_hw_cpu_shutdown</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cpuport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[cd]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[cf]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[134]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[135]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[1a4]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>rt_hw_serial_register</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
</UL>

<P><STRONG><a name="[bf]"></a>rt_hw_serial_isr</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_hw_serial_isr &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>rt_hw_serial_dma_tx_isr</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
</UL>

<P><STRONG><a name="[151]"></a>rt_data_queue_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
</UL>

<P><STRONG><a name="[152]"></a>rt_data_queue_push</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[154]"></a>rt_data_queue_pop</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, dataqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_dma_tx_isr
</UL>

<P><STRONG><a name="[155]"></a>rt_data_queue_peak</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, dataqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_dma_tx_isr
</UL>

<P><STRONG><a name="[159]"></a>rt_data_queue_reset</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, dataqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[1a5]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[1a6]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[1a7]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[54]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[58]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1a8]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1ab]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1ac]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6c]"></a>PIN_GetPointer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lpc_pinsel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetFilter
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetOpenDrainMode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetI2CMode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetI2CFilter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetSlewMode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetInvertInput
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetHysMode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetPinMode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_SetAnalogPinMode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_DacEnable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[7c]"></a>uart_get_pointer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Send
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485ReceiverCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RS485Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ABClearIntPending
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ABCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[77]"></a>uart_set_divisors</STRONG> (Thumb, 540 bytes, Stack size 128 bytes, lpc_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[5d]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[9d]"></a>mci_tx_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_process_ISR
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_write
</UL>

<P><STRONG><a name="[9e]"></a>mci_rx_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_process_ISR
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_read
</UL>

<P><STRONG><a name="[8e]"></a>mci_get_cardStatus</STRONG> (Thumb, 120 bytes, Stack size 60 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mci_get_cardStatus &rArr; mci_cmd_resp &rArr; mci_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_check_status
</UL>

<P><STRONG><a name="[8f]"></a>mci_check_status</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = mci_check_status &rArr; mci_get_cardStatus &rArr; mci_cmd_resp &rArr; mci_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_get_cardStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_stopTransmission
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_blockLen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_selectCard
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_get_CSD
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_read
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_send_buswidth
</UL>

<P><STRONG><a name="[af]"></a>mci_set_clock</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mci_set_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_hw_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_config
</UL>

<P><STRONG><a name="[98]"></a>mci_send_buswidth</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mci_send_buswidth &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_sendACMD
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_resp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_check_status
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_buswidth
</UL>

<P><STRONG><a name="[a3]"></a>mci_set_outputMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_cardAddress
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_acmd_sendOpCond
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_init
</UL>

<P><STRONG><a name="[ae]"></a>unstuff_bits</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = unstuff_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_config
</UL>

<P><STRONG><a name="[ad]"></a>swap_buff</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_config
</UL>

<P><STRONG><a name="[ac]"></a>mci_read_config</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mci_read_config &rArr; mci_set_buswidth &rArr; mci_send_buswidth &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_blockLen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_selectCard
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_get_CSD
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_cardAddress
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_get_CID
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_buswidth
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buff
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unstuff_bits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mci_init
</UL>

<P><STRONG><a name="[37]"></a>rt_mci_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rt_mci_init &rArr; mci_read_config &rArr; mci_set_buswidth &rArr; mci_send_buswidth &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_acmd_sendOpCond
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_sendIfCond
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_sendOpCond
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_card_reset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_set_outputMode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sd.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>rt_mci_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_sd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drv_sd.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>rt_mci_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_sd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> drv_sd.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>rt_mci_read</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_mci_read &rArr; mci_cmd_stopTransmission &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_stopTransmission
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SettingDma
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_check_status
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_rx_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sd.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>rt_mci_write</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_mci_write &rArr; mci_cmd_stopTransmission &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_cmd_stopTransmission
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SettingDma
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_check_status
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_tx_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sd.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>rt_mci_control</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, drv_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_mci_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sd.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv_sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_hw_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SettingDma
</UL>

<P><STRONG><a name="[c0]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
</UL>

<P><STRONG><a name="[45]"></a>lpc_configure</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lpc_configure &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>lpc_control</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lpc_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IntConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>lpc_putc</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lpc_putc &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>lpc_getc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lpc_getc &rArr; UART_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_uart_init
</UL>

<P><STRONG><a name="[3d]"></a>rt_thread_idle_entry</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[ed]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[eb]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>

<P><STRONG><a name="[ee]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
</UL>

<P><STRONG><a name="[108]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[f0]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>

<P><STRONG><a name="[f2]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
</UL>

<P><STRONG><a name="[fd]"></a>rt_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[122]"></a>print_number</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[121]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[129]"></a>plug_holes</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = plug_holes &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[12d]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[12e]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[130]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[131]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[139]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[13b]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[3e]"></a>rt_thread_exit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>_rt_thread_init</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[14d]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[144]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[146]"></a>rt_timer_list_next_timeout</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_next_timeout_tick
</UL>

<P><STRONG><a name="[14a]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[148]"></a>rt_timer_count_height</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_dump
</UL>

<P><STRONG><a name="[145]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[147]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_count_height
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[3f]"></a>rt_serial_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_serial_init &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>rt_serial_open</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_serial_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>rt_serial_close</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_serial_close &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>rt_serial_read</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_serial_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>rt_serial_write</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_serial_write &rArr; rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>rt_serial_control</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_serial_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[157]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[156]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[158]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
